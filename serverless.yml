# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: poe-open-indexer # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  region: us-east-1
  profile: louise
  memorySize: 128
  timeout: 1
  environment:
    stage: ${self:provider.stage}
    service: ${self:service}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - Ref: ServerlessDeploymentBucket
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
      Resource:
        Fn::Join:
          - ""
          - - "arn:aws:s3:::"
            - Ref: ServerlessDeploymentBucket
            - "/*"

functions:
  Invoker:
    handler: src/invoker.invoker
    timeout: 61
    memorySize: 512
    role: InvokerRole
    events:
      - schedule:
        rate: rate(1 minutes)
        enabled: false
    environment:
        RiverARN: { "Fn::GetAtt": ["RiverLambdaFunction", "Arn" ] }
  River:
    handler: src/river.river
    timeout: 1
    memorySize: 128

plugins:
  - serverless-plugin-include-dependencies

resources:
  Resources:
    InvokerRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service}-${self:provider.stage}-InvokerRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: InvokeRiver
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: arn:aws:logs:::log-group:/aws/lambda/*:*:*
                - Effect: Allow
                  Action:
                    - lambda:InvokeFunction
                  Resource: { "Fn::GetAtt": ["RiverLambdaFunction", "Arn" ] }